# Generators that output lists of chars

# Function Generated by ChatGPT
def _rainboxHexGenerator(num_intermediates, include_endpoints=False):
    # List of main rainbow colors
    rainbow_colors = [
        "#FF0000",  # Red
        "#FF7F00",  # Orange
        "#FFFF00",  # Yellow
        "#00FF00",  # Green
        "#0000FF",  # Blue
        "#4B0082",  # Indigo
        "#8A2BE2"   # Violet
    ]
    # If no intermediates requested, return the main colors
    if num_intermediates < 1:
        return rainbow_colors
    full_spectrum = []
    # Generate intermediaries between main colors
    for i in range(len(rainbow_colors) - 1):
        current_color = rainbow_colors[i]
        next_color = rainbow_colors[i + 1]
        full_spectrum.append(current_color)
        for j in range(num_intermediates):
            # Calculate RGB values for intermediate color
            r1, g1, b1 = int(current_color[1:3], 16), int(current_color[3:5], 16), int(current_color[5:7], 16)
            r2, g2, b2 = int(next_color[1:3], 16), int(next_color[3:5], 16), int(next_color[5:7], 16)
            r_int = int(r1 + (j * (r2 - r1) / num_intermediates))
            g_int = int(g1 + (j * (g2 - g1) / num_intermediates))
            b_int = int(b1 + (j * (b2 - b1) / num_intermediates))
            hex_code = "#{:02X}{:02X}{:02X}".format(r_int, g_int, b_int)
            full_spectrum.append(hex_code)
    
    # Include intermediaries between violet and red if requested
    if include_endpoints:
        for j in range(num_intermediates):
            r1, g1, b1 = int(rainbow_colors[-1][1:3], 16), int(rainbow_colors[-1][3:5], 16), int(rainbow_colors[-1][5:7], 16)
            r2, g2, b2 = int(rainbow_colors[0][1:3], 16), int(rainbow_colors[0][3:5], 16), int(rainbow_colors[0][5:7], 16)
            r_int = int(r1 + (j * (r2 - r1) / num_intermediates))
            g_int = int(g1 + (j * (g2 - g1) / num_intermediates))
            b_int = int(b1 + (j * (b2 - b1) / num_intermediates))
            hex_code = "#{:02X}{:02X}{:02X}".format(r_int, g_int, b_int)
            full_spectrum.append(hex_code)
        
    # Append the last color (violet) if not including violet-to-red intermediaries
    if not include_endpoints:
        full_spectrum.append(rainbow_colors[-1])
    return full_spectrum

def _hexToAnsi(hex_color):
    r = int(hex_color[1:3], 16)
    g = int(hex_color[3:5], 16)
    b = int(hex_color[5:7], 16)
    ansi_code = f"\x1b[38;2;{r};{g};{b}m"
    return ansi_code

def baseGenerator(charset=list,pixels=list):
    if charset != [] or charset == None: char = "#"
    char = str(charset[0])
    chars = []
    for px in pixels:
        chars.append(char)
    return chars

def repeatGenerator(charset=list,pixels=list):
    if charset == [] or charset == None: charset = ["#"]
    csi = 0
    chars = []
    for _ in pixels:
        if csi > len(charset)-1:
            csi = 0
        chars.append(charset[csi])
        csi += 1
    return chars

def numberGenerator(charset=list,pixels=list):
    if len(charset) == 2:
        try:
            rs = int(charset[0])
        except: 
            rs = 0
        try:
            re = int(charset[1])
        except:
            re = len(pixels)
    else:
        rs = 0
        re = len(pixels)
    numbers = []
    for num in range(rs,re):
        numbers.append(str(num))
    return repeatGenerator(numbers,pixels)

def rainbowGenerator(charset=list,pixels=list):
    colors = _rainboxHexGenerator(10,True)
    characters = repeatGenerator(charset,pixels)
    charset2 = []
    csi = 0
    for i,character in enumerate(characters):
        if csi > len(colors)-1:
            csi = 0
        string = _hexToAnsi(colors[csi])
        csi += 1
        string += character
        charset2.append(string)
    return repeatGenerator(charset2,pixels)

def rainbowGeneratorZero(charset=list,pixels=list):
    colors = _rainboxHexGenerator(10,True)
    characters = repeatGenerator(charset,pixels)
    charset2 = []
    csi = 0
    for i,character in enumerate(characters):
        if csi > len(colors)-1:
            csi = 0
        string = _hexToAnsi(colors[csi])
        csi += 1
        string += character
        string += "\033[0m"
        charset2.append(string)
    return repeatGenerator(charset2,pixels)